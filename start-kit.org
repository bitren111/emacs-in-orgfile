#+TITLE: About Start kit
#+OPTIONS: TOC:4 H:4
* About Start kit
Start kit是来源于一个通过文本方式编程的想法，它将代码与相应的文字描述，通过写作的方式进行了整合，以达到自动生成可用代码的工具。详细可参考地址：https://github.com/eschulte/emacs24-starter-kit
Start kit的使用需要一些工程初使配置，而初使配置即在此文件中，文件中增加了 =starter-kit-load= 方法，通过此方法即可让Emacs直接加载 =.org= 文件，并自动运行。它的实现原理实际是采用了 =org-babel= 这个技术，通过 =org-babel= 可以实现不同的语言代码写在同一个文件中，并互不影响的执行。详细可参考地址：http://orgmode.org/worg/org-contrib/babel/intro.html

#+begin_src emacs-lisp :tangle yes
;; define a function which allow us to load org file for emacs
(defun starter-kit-load (file &optional header-or-tag)
  "Load configuration from other starter-kit-*.org files.
If the optional argument is the id of a subtree then only
configuration from within that subtree will be loaded.  If it is
not an id then it will be interpreted as a tag, and only subtrees
marked with the given tag will be loaded.

For example, to load all of starter-kit-lisp.org simply
add (starter-kit-load \"lisp\") to your configuration.

To load only the 'window-system' config from
starter-kit-misc-recommended.org add
 (starter-kit-load \"misc-recommended\" \"window-system\")
to your configuration."
  (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                    file
                                  (format "starter-kit-%s.org" file))
                                starter-kit-dir)))
    (org-babel-load-file
     (if header-or-tag
         (let* ((base (file-name-nondirectory file))
                (dir  (file-name-directory file))
                (partial-file (expand-file-name
                               (concat "." (file-name-sans-extension base)
                                       ".part." header-or-tag ".org")
                               dir)))
           (unless (file-exists-p partial-file)
             (with-temp-file partial-file
               (insert
                (with-temp-buffer
                  (insert-file-contents file)
                  (save-excursion
                    (condition-case nil ;; collect as a header
                        (progn
                          (org-link-search (concat"#"header-or-tag))
                          (org-narrow-to-subtree)
                          (buffer-string))
                      (error ;; collect all entries with as tags
                       (let (body)
                         (org-map-entries
                          (lambda ()
                            (save-restriction
                              (org-narrow-to-subtree)
                              (setq body (concat body "\n" (buffer-string)))))
                          header-or-tag)
                         body))))))))
           partial-file)
       file))))


(let ((elisp-dir (expand-file-name "src" starter-kit-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path))))
    (setq autoload-file (concat starter-kit-dir "loaddefs.el"))
    (setq package-user-dir (concat starter-kit-dir "elpa"))
    (setq custom-file (concat starter-kit-dir "custom.el"))

(defun starter-kit-loadable-p (package)
      "Check if PACKAGE is loadable from a directory in `load-path'."
      (let ((load-file (concat (symbol-name package) ".el")))
        (catch 'file-found
          (dolist (dir load-path)
            (let ((path (expand-file-name load-file dir)))
              (when (file-exists-p path)
                (throw 'file-found path)))))))
#+end_src



- Starter kit function definitions in [[file:02-For-base-using/starter-kit-for-base-using.org][starter-kit-for-base-using]]
  #+begin_src emacs-lisp :tangle yes
  (starter-kit-load "02-For-base-using/starter-kit-for-base-using.org")
  #+end_src
