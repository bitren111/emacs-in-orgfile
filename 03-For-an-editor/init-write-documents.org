#+TITLE: 用Emacs写文档
#+LANGUAGE:  zh
#+AUTHOR: Lu Jianmei
#+EMAIL: lu.jianmei@trs.com.cn
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t p:t pri:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: A notes that include all works and study things in 2015
#+KEYWORDS:  org-mode Emacs jquery jquery.mobile jquery.ui wcm
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+LATEX_CLASS: cn-article
#+STARTUP: logredeadline, logreschedule
#+ATTR_HTML: :border 2 :rules all :frame all

** Gernal packages configurations
当前分类下，列出支持的包的配置信息。
*** Auto complete using company-mode
自动完成功能的配置，可以基于它针对不同的语言进行配置自动提示功能；
#+begin_src emacs-lisp :tangle yes
    ;; Turn on auto complete.
  ;;  (require 'auto-complete-config)       
    ;;(ac-config-default)

  (use-package company
    :defer t
    :config (add-hook 'prog-mode-hook 'company-mode))

#+end_src

*** Manage the dash package
此包用于在macbook上调用dash应用的功能，其它操作系统可以不用；
#+begin_src emacs-lisp :tangle yes
  (use-package dash
    :defer t)
#+end_src

*** Config the backups
配置自动备份；
#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq backup-directory-alist '(("." . (expand-file-name "backups" user-emacs-directory))))
#+END_SRC

*** Save files
Emacs中的自动保存功能，单独存储在另一个文件夹中。
#+BEGIN_SRC emacs-lisp :tangle yes
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
;;(setq auto-save-file-name-transforms '((".*" (expand-file-name "auto-save-list" user-emacs-directory) t)))
#+END_SRC

*** Save history
保存历史记录
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq savehist-file "~/.emacs.d/savehist")
(setq savehist-file (expand-file-name "savehist" user-emacs-directory))
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

*** Org mode
**** Org-mode Base configuration
For org mode base configuration, please find [[file:../03-For-an-editor/init-org-mode.org][Init-Org-mode]].
#+begin_src emacs-lisp :tangle yes
;; load my own org-mode configuration from init-org-mode.el
  (starter-kit-load "03-For-an-editor/init-org-mode.org")
;;(require 'init-org-mode)
;;(load-library "init-org-mode")


#+end_src

**** Org-mode Agenda view configuration
For org mode agenda view configuration, please find  [[file:../03-For-an-editor/init-org-agenda-view.org][Init-Org-Agenda-View]].
#+begin_src emacs-lisp :tangle yes
;; load my own org-mode configuration from init-org-agenda-view.el
  (starter-kit-load "03-For-an-editor/init-org-agenda-view.org")
;;(require 'init-org-agenda-view)
;;(load-library "init-org-agenda-view")
#+end_src

**** Org-mode table shift configuration
For org mode agenda view configuration, please find  [[file:../03-For-an-editor/init-org-table-shift.org][Init-Org-table-shift]].
#+begin_src emacs-lisp :tangle yes
;; load my own org-mode configuration from init-org-table-shift.el
  (starter-kit-load "03-For-an-editor/init-org-table-shift.org")
;;(require 'init-org-table-shift)
;;(load-library "init-org-table-shift")
#+end_src

**** Key bindings configurations
#+begin_src emacs-lisp :tangle yes
;; -----------------------------------------
;;key bindings for org mode
;; -----------------------------------------

(global-unset-key (kbd "C-'")) ;; this setting has no use, and conflict with smart


;;(global-set-key (kbd "<f12>") 'org-agenda) ;; configured blew
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "C-c c") 'org-capture)

;; add ~/notes/front-end-dev-plan.org into agenda
;; (setq org-agenda-files (list "~/notes/front-end-dev-plan.org"))
(global-set-key "\C-c a" 'org-agenda)
;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)


;; config for export-mutilpul files
(global-set-key (kbd "C-<f12>") 'bh/save-then-publish)

;; config for clocking
(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)

(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)



#+end_src
**** Key binding for org-mode

#+CAPTION: Org-mode快捷键
     #+ATTR_LATEX: :environment longtable :align l|l|l
| 分类          | 快捷键                     | 说明                                                                                      |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| org-mode      | C-RET                      | 加入同级别索引                                                                            |
|               | M-RET                      | 加入同级别的列表                                                                          |
|               | C-c C-t                    | 设置TODO标签                                                                              |
|               | M-left/M-right             | 修改任务等级，子任务不跟着变化                                                            |
|               | M-S-up/down                | 调整此任务节点等级，子任务跟着变化                                                        |
|               | C-c -                      | 更换列表标记(循环)                                                                        |
|               | M-S-RET                    | 新增一个子项                                                                              |
|               | M-up/M-down                | 调整此任务节点的顺序                                                                      |
|               | C-c b                      | 只编辑当前级别列表                                                                        |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| outline       | C-c C-p                    | 上一个标题                                                                                |
|               | C-c C-n                    | 下一下                                                                                    |
|               | C-c C-f                    | 同一级的上一个                                                                            |
|               | C-c C-b                    | 同一级的下一个                                                                            |
|               | C-c C-u                    | 回到上一级标题                                                                            |
|               | C-c C-j                    | 跳转标题                                                                                  |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| column        | C-c C-x C-c                | 打开column视图模式                                                                        |
|               | r                          | 刷新                                                                                      |
|               | q                          | 退出                                                                                      |
|               | <left> <right> <up> <down> | 视图之间跳转                                                                              |
|               | v                          | 查看属性完整值                                                                            |
|               | C-c C-x i                  | 插入column视图在文件中                                                                    |
|               | C-c C-x C-u                | 更新column视图中的值，需要进入表格中执行                                                  |
|               | C-u C-c C-x C-u            | 更新此文件中所有的column视图内容                                                          |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Property      | C-c C-x p                  | 设置一个属性                                                                              |
|               | C-c C-x p COLUMN           | 设置column，内容可以为%25ITEM 10%ITEM 5%TODO 30%SCEDULE 30%DEADLINE                       |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Tags          | C-c C-c C-c                | 打开tag选择窗口，然后通过字母索引选择tag                                                  |
|               | SPC                        | 清除所有tag                                                                               |
|               | C-c C-c                    | 可以直接输入tag的单词直接进行选择                                                         |
|               | C-c C-x C-c                | 打开列展示视图                                                                            |
|               | q                          | 退出列视图                                                                                |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Planning      | C-c .                      | 设置时间                                                                                  |
|               | S-left/S-right             | 在日历中选择时间                                                                          |
|               | M-n/M-p                    | 设置任务的优先级                                                                          |
|               | C-c C-s                    | 设置任务开始时间, schedlued                                                               |
|               | C-c C-d                    | 设置任务结束时间，deadline                                                                |
|               | C-c / d                    | 显示警告天数之内的Deadline任务                                                            |
|               | C-u C-c / d                | 显示所有的deadline任务                                                                    |
|               | C-1 C-c / d                | 查看一天之内接近的deadline任务列表                                                        |
|               | C-c / b                    | 查看指定日期之前的deadline, schedule任务列表                                              |
|               | C-c / a                    | 查看指定日期之后的deadline, schedule任务列表                                              |
|               | C-c .                      | 插入时间(Timestamps)                                                                      |
|               | S-left/right               | 光标在时间上时，用于往前一天往后一天调整                                                  |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Clocking      | C-c C-x C-i                | 开始clock                                                                                 |
|               | C-c C-x C-o                | 退出clock                                                                                 |
|               | C-c C-x C-r                | 插入clock table                                                                           |
|               | C-c C-x ;                  | Start a count down time                                                                   |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Agenda        | C-c a                      | 打开agenda view, 然后根据显示视图进行选择性显示                                           |
|               | C-c [                      | 添加当前文件进入agenda-view-file中                                                        |
|               | C-c ]                      | 删除当前文件从agenda-view-file中                                                          |
|               | C-c C-x <                  | 强制限制只使用当前文件或当前节点来显示agenda-view                                         |
|               | C-c C-x >                  | 取消以上限制                                                                              |
|               | C-c a t                    | 显示TODO列表                                                                              |
|               | C-c a T                    | 可以指定要显示的状态列表，多个状态使用"竖线"隔开显示                                      |
|               | C-c a m                    | 匹配 tags and properties                                                                  |
|               | C-c a M                    | 匹配搜索的tag                                                                             |
|               | C-c a L                    | 采用timeline的方式显示此项目，只能在一个单文件上执行此操作                                |
|               | C-c a s                    | 按搜索关键查询                                                                            |
|               | C-c a #                    | 列出项目暂停的任务                                                                        |
|               | C-c C-w                    | 导出文件                                                                                  |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Agenda column | C-c C-x C-c                | 打开column模式在agenda view中                                                             |
|               |                            |                                                                                           |
|               |                            |                                                                                           |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Capture       | C-c c                      | 打开capture                                                                               |
|               |                            |                                                                                           |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Export        | C-<f12>                    | 一次性生成所有目录的org文件为html文件，发布配置见.emacs.d中的配置目录                     |
|               | C-c C-e                    | 导出                                                                                      |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Tables        | C-c 竖线                   | 插入表格                                                                                  |
|               | C-c -                      | 在下面添加水平线                                                                          |
|               | C-c RET                    | 添加水平线并跳转到下一行                                                                  |
|               | C-m                        | 在本列下面添加一行                                                                        |
|               | M-S-Right                  | 在本列后面添加一列                                                                        |
|               | M-S-Down                   | 在本行上面添加一行                                                                        |
|               | M-S-Left                   | 删除本列                                                                                  |
|               | M-S-UP                     | 删除本行                                                                                  |
|               | M-left/right               | 移动列                                                                                    |
|               | M-Up/Down                  | 移动行                                                                                    |
|               | C-c C-c                    | 重新定义表格                                                                              |
|               | C-c `                      | 修改隐藏的表格中的内容                                                                    |
|               | TAB                        | 跳转下一个单元格                                                                          |
|               | M-a / S-tab                | 跳转到上一个单元格                                                                        |
|               | C-c SPAC                   | 清除当前单元格内容                                                                        |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Aligns        | M-x cfs-switch-profile     | 修改一下当前buffer使用的字体profile，表格对齐需要按中英文字体宽度相同配置                 |
|               | M-x cfs-edit-profile       | 修改当前profile的配置，可以在修改字体和大小后，在对应的字体大小行上，执行C-c C-c测试      |
|               | M-x cfs-increase-fontsize  | 放大字体，按等宽方式放大，已经绑定快捷键C-x C-=                                           |
|               | M-x cfs-decrease-fontsize  | 缩小字体，按等宽方式缩小，已经绑定快捷键C-x M-=                                           |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Archive       | C-c C-x a                  | 内部归档，将本任务下的所有子任务标识为灰色，默认将是不可打开的状态，可以通过C-TAB进行打开 |
|               | C-TAB                      | 打开内部归档后的任务                                                                      |
|               | C-c C-x A                  | 将此任务迁移入一个名为"Archive"的标记条下                                                 |
|               | C-c C-x C-a                | 将此任务迁移到与当前文件名相同名称+_archive的文件中                                       |
|               | C-c C-x C-s                | 同上                                                                                      |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Refile        | C-c C-w                    | 将此标签任务迁移到其它文件中                                                              |
|               | C-c M-w                    | 同上，并保留当前文件内容                                                                  |
| Helm-org      | C-x c i                    | 显示当前文件中所有的headings，支持搜索和切换                                                                |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|


*** Macros

**** Key bindings configuration for Macros
#+begin_src emacs-lisp :tangle yes

#+end_src
**** Key bindings for Macros
#+CAPTION: Org-mode快捷键
     #+ATTR_LATEX: :environment longtable :align l|l|l
|--------------------+-------------------------+-----------------------------------------------------------------------------------------------|
| 宏                 | C-x (                   | 开始录制宏                                                                                    |
|                    | C-x )                   | 结束录制宏                                                                                    |
|                    | C-x e                   | 使用宏                                                                                        |
|                    | C-u                     | 重复使用宏，C-u 100 C-x e重复100次                                                            |
|                    | M-x name-last-kbd-macro | 保存宏，可以在其它地方通过M-x调用此保存好的宏                                                 |
|--------------------+-------------------------+-----------------------------------------------------------------------------------------------|
|                    |                         |                                                                                               |

*** Markdown mode

**** Configuration
For markdown mode base configuration, please find [[file:../lisp/init-markdown-mode.el][Init-markdown-mode]].
#+begin_src emacs-lisp :tangle yes

;; load my own markdown mode configuration from lisp/init-markdown-mode.el
(require 'init-markdown-mode)

#+end_src
*** Tramp
**** Configuration
#+begin_src emacs-lisp :tangle yes
;; setting for tramp
(setq tramp-default-method "ssh")

;; config for caching password for 36000s
(setq password-cache-expiry 36000)

#+end_src
*** DONE Winner mode - undo and redo window configuration
    - State "DONE"       from ""           [2016-05-29 Sun 07:02]

=winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press =C-c <left>=.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winner
  :defer t)
#+END_SRC

*** DONE Mode line format
    - State "DONE"       from ""           [2016-05-29 Sun 07:02]
Display a more compact mode line

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smart-mode-line
    :defer t)
#+END_SRC

*** DONE Undo tree
    - State "DONE"       from ""           [2016-05-29 Sun 07:02]
Allow us to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.
Shot key binding: =(C-x u)=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))

#+END_SRC

*** DONE Help - guide key
    - State "DONE"       from ""           [2016-05-29 Sun 07:02]
This library is very helpful, we can use it to help us remember or find the shot key binding. It will pops up a mini-buffer to show us the shot-key when we typed first part with a shot delay.
=(guide-key)= 包可以帮助我们查看操作的快捷键，对于一些不太常用的快捷键想不起来的时候，可以输入快捷键的前缀后，暂停一下，Emacs即会弹出一个子窗口，列出当前前缀下可以选择的快捷键，及其函数名称。以方便我们进行查找。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package guide-key
  :defer t
  :diminish guide-key-mode
  :config
  (progn
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
  (guide-key-mode 1)))  ; Enable guide-key-mode
#+END_SRC
*** DONE Encoding configruation
    - State "DONE"       from ""           [2016-05-29 Sun 07:03]
This configuration from: http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp :tangle yes
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

*** DONE Helm
    - State "DONE"       from ""           [2016-05-29 Sun 07:03]

**** Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package helm
    :defer t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match t
            helm-buffers-fuzzy-matching t
            helm-M-x-fuzzy-match t
            helm-mode-fuzzy-match t
            helm-completion-in-region-fuzzy-match t
            helm-recentf-fuzzy-match t
            helm-semantic-fuzzy-match t
            helm-imenu-fuzzy-match t
            helm-apropos-fuzzy-match t
            helm-lisp-fuzzy-completion t
            helm-M-x-requires-pattern nil
            helm-autoresize-mode 1 ;; resize the window
            helm-autoresize-max-height 40 ;; make the max height as 40% percent of current frame height
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("C-c h" . helm-mini)
           ("C-x c a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)         ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c b" .  helm-do-grep-book-notes)
           ("C-x c i" . helm-org-in-buffer-headings)
           ("C-x c SPC" . helm-all-mark-rings)))
  ;(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally


  (use-package helm-descbinds
    :defer t
    :bind (("C-x c b" . helm-descbinds)
           ("C-x c w" . helm-descbinds)))

  ;; Use helm to browse my notes files
  (defvar book-notes-directory "~/workspace/github/work-notes")
  (defun helm-do-grep-book-notes ()
    "Search my book notes."
    (interactive)
    (helm-do-grep-1 (list book-notes-directory)))
#+end_src
*** DONE Helm-swoop
    - State "DONE"       from ""           [2016-05-29 Sun 07:03]
#+begin_src emacs-lisp :tangle yes

  ;; setting for helm-swoop

  ;; https://github.com/ShingoFukuyama/helm-swoop
  (use-package helm-swoop
    :defer t
   :bind
   (("C-S-s" . helm-swoop)
    ("M-i" . helm-swoop)
    ("M-s s" . helm-swoop)
    ("M-s M-s" . helm-swoop)
    ("M-I" . helm-swoop-back-to-last-point)
    ("C-c M-i" . helm-multi-swoop)
    ("C-x M-i" . helm-multi-swoop-all)
    )
   :config
   (progn
  ;; When doing isearch, hand the word over to helm-swoop
     (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
     (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

  )
  )

  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)

  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows nil)

  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically)

  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color nil)

  ;; ;; Go to the opposite side of line from the end or beginning of line
  (setq helm-swoop-move-to-line-cycle t)

  ;; Optional face for line numbers
  ;; Face name is `helm-swoop-line-number-face`
  (setq helm-swoop-use-line-number-face t)



#+end_src
*** DONE Snippets
    - State "DONE"       from ""           [2016-05-29 Sun 07:04]
Snippets工具可以让我们使用定义好的代码片断，或者文本块，从而可以通过快捷键的方式快速录入。从而提高录入速度。
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :defer t
    :diminish yas-minor-mode
    :init (yas-global-mode)
    :config
    (progn
      (yas-global-mode)
      (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
      (setq yas-key-syntaxes '("w_" "w_." "^ "))
      ;;(setq yas-installed-snippets-dir "~/emacs.d-new/yasnippet-snippets")
      (setq yas-installed-snippets-dir (expand-file-name "yasnippet-snippets" user-emacs-directory))
      (setq yas-expand-only-for-last-commands nil)
      (yas-global-mode 1)
      (bind-key "\t" 'hippie-expand yas-minor-mode-map)
      (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt)))


  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))


  (setq default-cursor-color "gray")
  (setq yasnippet-can-fire-cursor-color "purple")

  ;; It will test whether it can expand, if yes, cursor color -> green.
  (defun yasnippet-can-fire-p (&optional field)
    (interactive)
    (setq yas--condition-cache-timestamp (current-time))
    (let (templates-and-pos)
      (unless (and yas-expand-only-for-last-commands
                   (not (member last-command yas-expand-only-for-last-commands)))
        (setq templates-and-pos (if field
                                    (save-restriction
                                      (narrow-to-region (yas--field-start field)
                                                        (yas--field-end field))
                                      (yas--templates-for-key-at-point))
                                  (yas--templates-for-key-at-point))))
      (and templates-and-pos (first templates-and-pos))))

  (defun my/change-cursor-color-when-can-expand (&optional field)
    (interactive)
    (when (eq last-command 'self-insert-command)
      (set-cursor-color (if (my/can-expand)
                            yasnippet-can-fire-cursor-color
                          default-cursor-color))))

  (defun my/can-expand ()
    "Return true if right after an expandable thing."
    (or (abbrev--before-point) (yasnippet-can-fire-p)))

                                          ; As pointed out by Dmitri, this will make sure it will update color when needed.
  (remove-hook 'post-command-hook 'my/change-cursor-color-when-can-expand)

  (defun my/insert-space-or-expand ()
    "For binding to the SPC SPC keychord."
    (interactive)
    (condition-case nil (or (my/hippie-expand-maybe nil) (insert "  "))))

  (defun my/hippie-expand-maybe (arg)
    "Try to expand text before point, using multiple methods.
  The expansion functions in `hippie-expand-try-functions-list' are
  tried in order, until a possible expansion is found.  Repeated
  application of `hippie-expand' inserts successively possible
  expansions.
  With a positive numeric argument, jumps directly to the ARG next
  function in this list.  With a negative argument or just \\[universal-argument],
  undoes the expansion."
    (interactive "P")
    (require 'hippie-exp)
    (if (or (not arg)
            (and (integerp arg) (> arg 0)))
        (let ((first (or (= he-num -1)
                         (not (equal this-command last-command)))))
          (if first
              (progn
                (setq he-num -1)
                (setq he-tried-table nil)))
          (if arg
              (if (not first) (he-reset-string))
            (setq arg 0))
          (let ((i (max (+ he-num arg) 0)))
            (while (not (or (>= i (length hippie-expand-try-functions-list))
                            (apply (nth i hippie-expand-try-functions-list)
                                   (list (= he-num i)))))
              (setq i (1+ i)))
            (setq he-num i))
          (if (>= he-num (length hippie-expand-try-functions-list))
              (progn (setq he-num -1) nil)
            (if (and hippie-expand-verbose
                     (not (window-minibuffer-p)))
                (message "Using %s"
                         (nth he-num hippie-expand-try-functions-list)))))
      (if (and (>= he-num 0)
               (eq (marker-buffer he-string-beg) (current-buffer)))
          (progn
            (setq he-num -1)
            (he-reset-string)
            (if (and hippie-expand-verbose
                     (not (window-minibuffer-p)))
                (message "Undoing expansions"))))))


#+end_src

*** DONE Avy

Quickly jump to a position in the current view.
已经转使用ace-isearch，因此此种配置可以去掉。也可以单独保留，与ace-isearch不冲突。
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :defer t)
    ;; I use the jj key-chord for this; see the definitions for key-chord
  (use-package avy-zap
    :defer t
    :bind
    (("M-z" . avy-zap-up-to-char-dwim)
     ("M-Z" . avy-zap-to-char-dwim)))
#+end_src
*** DONE Ace-isearch mode
    - State "DONE"       from ""           [2016-05-30 Mon 20:18]
Ace-isearch为集成了isearch, ace-jump-mode, avy, helm-swoop四个模式为一体的更方便的搜索体验。
Ace-isearch会根据输入的内容长度，来判断采用哪种模式。
The "default" behavior can be summrized as:
    + L = 1 : ace-jump-mode or avy
    + 1 < L < 6 : isearch
    + L >= 6 : helm-swoop

在实际使用时，如果我需要定位到当前屏幕的具体位置时，则输入第一个字母，然后稍等一下，即启动ace-jump-mode，屏幕此时会Mark上和我输入的首字母相同的位置，并通过不同和字母显示位置，我们只需要根据它显示的位置输入显示的字母，即可完成精准定位。
但当我需要输入一个单词进行搜索时，则输入内容在1-6个字母时，采用的是isearch，即字母完全匹配的全文搜索模式。
当字母大于6个时，即自动启动helm-swoop模式，进行快速选择。


#+begin_src emacs-lisp :tangle yes
  (use-package ace-isearch
    :config
    (progn
      (global-ace-isearch-mode +1) ;; start this for global
      ;;(setq ace-isearch-funtion-from-isearch 'swoop-from-isearch) ; need to install swoop
      ;;(define-key swoop-map (kbd "C-s") 'swoop-action-goto-line-next)
      ;;(define-key swoop-map (kbd "C-r") 'swoop-action-goto-line-prev)
      (setq ace-isearch-funtion-from-isearch 'helm-swoop-from-isearch)
      ;; (setq ace-isearch-funtion-from-isearch 'helm-occur-from-isearch) ; alternative way

      ;; blew configuration can be support for Chinese
      (defadvice ace-jump-char-category (around adv-ace-jump-support-umlauts activate)
        (unless (= (char-syntax (ad-get-arg 0)) ?w)
          ad-do-it)
        (setq ad-return-value 'alpha))

      ;; base configuration 
      (custom-set-variables
       '(ace-isearch-input-length 6)
       '(ace-isearch-jump-delay 0.25)
       '(ace-isearch-function 'ace-jump-word-mode)
       ;;'(ace-isearch-function 'avy-goto-char)
       '(ace-isearch-use-jump 'printing-char))
      (define-key isearch-mode-map (kbd "C-'") 'ace-isearch-jump-during-isearch)
      )
  )


#+end_src
*** DONE Edit-list
    - State "DONE"       from ""           [2016-05-29 Sun 07:04]
M-x edit-list makes it easier to edit an Emacs Lisp list.
#+ombegin_src emacs-lisp :tangle yes
  (use-package edit-list
    :defer t
    :commands edit-list)
#+end_src
*** DONE Zap to isearch
    - State "DONE"       from ""           [2016-05-29 Sun 07:04]
From Steve Purcell, who linked to http://www.emacswiki.org/emacs/ZapToISearch
#+begin_src emacs-lisp :tangle yes
(defun zap-to-isearch (rbeg rend)
  "Kill the region between the mark and the closest portion of
the isearch match string. The behaviour is meant to be analogous
to zap-to-char; let's call it zap-to-isearch. The deleted region
does not include the isearch word. This is meant to be bound only
in isearch mode.  The point of this function is that oftentimes
you want to delete some portion of text, one end of which happens
to be an active isearch word. The observation to make is that if
you use isearch a lot to move the cursor around (as you should,
it is much more efficient than using the arrows), it happens a
lot that you could just delete the active region between the mark
and the point, not include the isearch word."
  (interactive "r")
  (when (not mark-active)
    (error "Mark is not active"))
  (let* ((isearch-bounds (list isearch-other-end (point)))
         (ismin (apply 'min isearch-bounds))
         (ismax (apply 'max isearch-bounds))
         )
    (if (< (mark) ismin)
        (kill-region (mark) ismin)
      (if (> (mark) ismax)
          (kill-region ismax (mark))
        (error "Internal error in isearch kill function.")))
    (isearch-exit)
    ))

(define-key isearch-mode-map [(meta z)] 'zap-to-isearch)
#+end_src
*** Projectile - Project management
**** Configuration
     #+begin_src emacs-lisp :tangle yes
       (use-package projectile
         ;; :defer t
         :diminish projectile-mode
         :config
         (progn
           (setq projectile-keymap-prefix (kbd "C-c p"))
           (setq projectile-completion-system 'default)
           (setq projectile-enable-caching t)
           (setq projectile-indexing-method 'alien)
           (add-to-list 'projectile-globally-ignored-files "node-modules")
           ;; setting for projectile
           (setq projectile-other-file-alist '(("cpp" "h" "hpp" "ipp")
                                               ("ipp" "h" "hpp" "cpp")
                                               ("hpp" "h" "ipp" "cpp")
                                               ("cxx" "hxx" "ixx")
                                               ("ixx" "cxx" "hxx")
                                               ("hxx" "ixx" "cxx")
                                               ("c" "h")
                                               ("m" "h")
                                               ("mm" "h")
                                               ("h" "c" "cpp" "ipp" "hpp" "m" "mm")
                                               ("cc" "hh")
                                               ("hh" "cc")
                                               ("vert" "frag")
                                               ("frag" "vert")
                                               (nil "lock" "gpg")
                                               ("lock" "")
                                               ("gpg" "")
                                               ("js" "css" "html")))

           (add-to-list 'projectile-other-file-alist '("css" "js")) ;; switch from css -> js
           (add-to-list 'projectile-other-file-alist '("js" "css")) ;; switch from js -> css


           ;; setting for helm-projectile

           ;;(setq projectile-switch-project-action 'helm-projectile-find-file)
           (setq projectile-switch-project-action 'helm-projectile)

           )



         :config
         (projectile-global-mode))


       (use-package helm-projectile
         :defer t
         :init
         (setq helm-projectile-fuzzy-match t)
         )




     #+end_src
**** Key binding for helm-projectile
#+begin_src emacs-lisp :tangle yes
;; -----------------------------------------
;; helm-project
;; -----------------------------------------
(global-set-key (kbd "C-c h") 'helm-projectile)
  ;; Grep in a projectile
  (global-set-key (kbd "C-c p s g") 'helm-projectile-grep)


#+end_src
*** Chinese-font-setup
在Org-mode中，编辑表格并让表格的分隔线对齐是一件不太容易的事情，主要原因是因为Org-mode中编辑时字母与汉字同时存在时，则字母字体长度与汉字字体宽度不同的原因导致，因此这里的主要解决方案是找到一种通用等宽字体，通过字体的配置来达到最终表格对齐正常。
感谢Chinese-font-setup的包开发者：
**** Configuration
#+begin_src emacs-lisp :tangle yes
  ;; add font-config for chinese double-width fonts issue
  (use-package chinese-fonts-setup
    :config
    (setq cfs-profiles
          '("program" "org-mode" "read-book"))
  )

#+end_src
**** Shot key binding

#+begin_src emacs-lisp :tangle yes
;; Reset Increase Font size and Descrease Font size short key binding after using chinese-font-setup plugin
;; Reference: https://github.com/tumashu/chinese-fonts-setup
(global-unset-key (kbd "C-x C-=")) ;; remove original font-resize
(global-set-key (kbd "C-x C-=") 'cfs-increase-fontsize)
(global-set-key (kbd "C-x M-=") 'cfs-decrease-fontsize)

#+end_src
*** WAITING Smartparens                                             :WAITING:
    - State "WAITING"    from ""           [2016-05-30 Mon 20:36]
**** Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (setq sp-autoescape-string-quote nil)
    (--each '(css-mode-hook
              restclient-mode-hook
              js-mode-hook
              java-mode
              ruby-mode
              markdown-mode
              groovy-mode)
      (add-hook it 'turn-on-smartparens-mode))

  )


#+end_src
*** Expand-region
**** Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :config
    ;; Don't use expand-region fast keys
    (setq expand-region-fast-keys-enabled nil)

    ;; Show expand-region command used
    (setq er--show-expansion-message t)

    )
#+end_src
**** Key bindings for Expand-region
#+begin_src emacs-lisp :tangle yes
;; Expand region (increases selected region by semantic units)
(global-set-key (kbd "C-'") 'er/expand-region)

#+end_src
*** Swap-buffer

**** Configuration
#+begin_src emacs-lisp :tangle yes
  ;; add smart swap buffers in multi-windows
  (use-package swap-buffers
    :config
    (global-set-key (kbd "C-x 5") 'swap-buffers)
  )


#+end_src
*** Email Reader - Mu4e

Please find [[file:../lisp/init-mu4e.org][Init-Mu4e]].

#+begin_src emacs-lisp :tangle yes
;; load my mu4e configuration from lisp/init-mu4e.el
(require 'init-mu4e)
;;(load-library "init-mu4e")
#+end_src
*** Multiple cursors mode
Multiple cursor是一个非常强大的多位置同时编辑的编辑模式，文档可参考：
这里有一个介绍详细的视频：http://emacsrocks.com/e13.html
**** Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :defer t
    :bind
     (("C-c m t" . mc/mark-all-like-this)
      ("C-c m m" . mc/mark-all-like-this-dwim)
      ("C-c m l" . mc/edit-lines)
      ("C-c m e" . mc/edit-ends-of-lines)
      ("C-c m a" . mc/edit-beginnings-of-lines)
      ("C-c m n" . mc/mark-next-like-this)
      ("C-c m p" . mc/mark-previous-like-this)
      ("C-c m s" . mc/mark-sgml-tag-pair)
      ("C-c m d" . mc/mark-all-like-this-in-defun)))
  (use-package phi-search
    :defer t)
  (use-package phi-search-mc
    :defer t
    :config (phi-search-mc/setup-keys))
  (use-package mc-extras
    :defer t
    :config (define-key mc/keymap (kbd "C-. =") 'mc/compare-chars))
#+end_src
**** Short-key binding
#+begin_src emacs-lisp :tangle yes
;; add multi cursors:
;;(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)


#+end_src
*** Latex mode
#+begin_src emacs-lisp :tangle no
  ;;; latex --- Summary
  ;;; Config for latex
  (use-package auctex
    :defer t)

  (use-package cdlatex
    :defer t
    :config
    (add-hook 'LaTex-mode-hook 'turn-on-org-cdlatex) ;; with AUCTex LaTex mode-line
    (add-hook 'LaTex-mode-hook 'turn-on-org-cdlatex) ;; with Emacs latex mode
  )
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  ;; (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode

  ;; latex-preview-pane is a minor mode for Emacs that enables you to preview your LaTeX files directly in Emacs.


  (use-package latex-preview-pane
    :defer t
    :config
    (latex-preview-pane-enable))
  ;;(latex-preview-pane-enable)

  ;; magical syntax highlighting for LaTeX-mode buffers
  ;;(require-package 'magic-latex-buffer)
  (use-package magic-latex-buffer
    :defer t
    :config
    (add-hook 'latex-mode-hook 'magic-latex-buffer))
  ;;(add-hook 'latex-mode-hook 'magic-latex-buffer)

  ;;  Adds several useful functionalities to LaTeX-mode. http://github.com/Bruce-Connor/latex-extra

  (use-package latex-extra
    :defer t
    :config
    (add-hook 'latex-mode-hook 'latex-extra-mode))

  ;;(add-hook 'LaTeX-mode-hook #'latex-extra-mode)


#+end_src
*** TODO Wgrep
Wgrep是一个可以允许我们在grep模式下进行直接修改的工具，可以允许我们批量添加上Multiple cursors，然后进行批量修改的工具。在快速修改文件时非常方便，类似于sed的批量匹配，批量修改。
#+begin_src emacs-lisp :tangle no
;;; 未配置详细操作，暂时不使用
(use-package wgrep)
#+end_src
*** Tabbar
Tabbar，在Emacs中显示一个文件的切换标签，并且标签文件按projectile的进行分组显示，以方便在同一个项目中进行维护和切换文件。
**** Configuration
#+begin_src emacs-lisp :tangle yes
(use-package tabbar)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Interactive Functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun tabbar-select-end-tab ()
  "Select end tab of current tabset."
  (interactive)
  (tabbar-select-beg-tab t))

(defun tabbar-select-beg-tab (&optional backward type)
  "Select beginning tab of current tabs.
If BACKWARD is non-nil, move backward, otherwise move forward.
TYPE is default option."
  (interactive)
  (let* ((tabset (tabbar-current-tabset t))
         (ttabset (tabbar-get-tabsets-tabset))
         (cycle (if (and (eq tabbar-cycle-scope 'groups)
                         (not (cdr (tabbar-tabs ttabset))))
                    'tabs
                  tabbar-cycle-scope))
         selected tab)
    (when tabset
      (setq selected (tabbar-selected-tab tabset))
      (setq tabset (tabbar-tabs tabset)
            tab (car (if backward (last tabset) tabset)))
      (tabbar-click-on-tab tab type))))

(defun tabbar-backward-tab-other-window (&optional reversed)
  "Move to left tab in other window.
Optional argument REVERSED default is move backward, if reversed is non-nil move forward."
  (interactive)
  (other-window 1)
  (if reversed
      (tabbar-forward-tab)
    (tabbar-backward-tab))
  (other-window -1))

(defun tabbar-forward-tab-other-window ()
  "Move to right tab in other window."
  (interactive)
  (tabbar-backward-tab-other-window t))



;;; Code:

(defcustom tabbar-hide-header-button t
  "Hide header button at left-up corner.
Default is t."
  :type 'boolean
  :set (lambda (symbol value)
         (set symbol value)
         (if value
             (setq
              tabbar-scroll-left-help-function nil ;don't show help information
              tabbar-scroll-right-help-function nil
              tabbar-help-on-tab-function nil
              tabbar-home-help-function nil
              tabbar-buffer-home-button (quote (("") "")) ;don't show tabbar button
              tabbar-scroll-left-button (quote (("") ""))
              tabbar-scroll-right-button (quote (("") "")))))
  :group 'tabbar)

(defun tabbar-filter (condp lst)
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))

(defun tabbar-filter-buffer-list ()
  (tabbar-filter
   (lambda (x)
     (let ((name (format "%s" x)))
       (and
        (not (string-prefix-p "*epc" name))
        (not (string-prefix-p "*helm" name))
        (not (string-prefix-p "*Messages*" name))
        )))
   (delq nil
         (mapcar #'(lambda (b)
                     (cond
                      ;; Always include the current buffer.
                      ((eq (current-buffer) b) b)
                      ((buffer-file-name b) b)
                      ((char-equal ?\  (aref (buffer-name b) 0)) nil)
                      ((buffer-live-p b) b)))
                 (buffer-list)))))

(setq tabbar-buffer-list-function 'tabbar-filter-buffer-list)



(defvar tabbar-ruler-projectile-tabbar-buffer-group-calc nil
  "Buffer group for projectile.  Should be buffer local and speed up calculation of buffer groups.")
(defun tabbar-ruler-projectile-tabbar-buffer-groups ()
  "Return the list of group names BUFFER belongs to.
    Return only one group for each buffer."
  
  (if tabbar-ruler-projectile-tabbar-buffer-group-calc
      (symbol-value 'tabbar-ruler-projectile-tabbar-buffer-group-calc)
    (set (make-local-variable 'tabbar-ruler-projectile-tabbar-buffer-group-calc)
         
         (cond
          ((or (get-buffer-process (current-buffer)) (memq major-mode '(comint-mode compilation-mode))) '("Term"))
          ((string-equal "*" (substring (buffer-name) 0 1)) '("Misc"))
          ((condition-case err
               (projectile-project-root)
             (error nil)) (list (projectile-project-name)))
          ((memq major-mode '(emacs-lisp-mode python-mode emacs-lisp-mode c-mode c++-mode makefile-mode lua-mode vala-mode)) '("Coding"))
          ((memq major-mode '(javascript-mode js-mode nxhtml-mode html-mode css-mode)) '("HTML"))
          ((memq major-mode '(org-mode calendar-mode diary-mode)) '("Org"))
          ((memq major-mode '(dired-mode)) '("Dir"))
          (t '("Main"))))
    (symbol-value 'tabbar-ruler-projectile-tabbar-buffer-group-calc)))

(defun tabbar-ruler-group-by-projectile-project()
  "Group by projectile project."
  (interactive)
  (setq tabbar-buffer-groups-function 'tabbar-ruler-projectile-tabbar-buffer-groups))



;; group by projectile
(tabbar-ruler-group-by-projectile-project)
(tabbar-mode)

#+end_src

**** Key binding 
#+begin_src emacs-lisp :tangle yes
;; -----------------------------------------
;; start tabbar-mode
;; -----------------------------------------
(global-set-key (kbd "C-c t") 'tabbar-mode)
;; Tabbar, following is default key binding, no need to set again
;;(global-set-key (kbd "C-c <C-left>") 'tabbar-forward-tab)
;;(global-set-key (kbd "C-c <C-right>") 'tabbar-backward-tab)
;;(global-set-key (kbd "C-c <C-up>") 'tabbar-forward-group)
;;(global-set-key (kbd "C-c <C-down>") 'tabbar-backward-group)


#+end_src
*** Perspective
**** Configuration
#+begin_src emacs-lisp :tangle yes

  (use-package perspective
    :config
    ;; Enable perspective mode
    (progn
      (persp-mode t)
      ;; TODO: implement persp-last as before-advice on persp-switch (?)

      (defmacro custom-persp (name &rest body)
        `(let ((initialize (not (gethash ,name perspectives-hash)))
               (current-perspective persp-curr))
           (persp-switch ,name)
           (when initialize ,@body)
           (setq persp-last current-perspective)))

      ;; Jump to last perspective
      (defun custom-persp-last ()
        (interactive)
        (persp-switch (persp-name persp-last)))

      (define-key persp-mode-map (kbd "C-x p -") 'custom-persp-last)
      )
  )



#+end_src

*** Ido
Ido工具是为在窗口下面的状态栏中选择、显示时更清晰，操作更方便，并支持模糊匹配选择，这里只保留选择文件时启动ido，其它时间切换buffer等，采用helm进行。
**** Configuration
#+begin_src emacs-lisp :tangle yes
;; Use C-f during file selection to switch to regular find-file
(ido-mode t)
;;(ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point nil)
(setq ido-auto-merge-work-directories-length 0)
(setq ido-use-virtual-buffers t)

#+end_src
*** Multiple Major Mode
**** Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package mmm-mode
    :config
    ;;(require 'mmm-auto)
    (setq mmm-global-mode 'buffers-with-submode-classes)
    (setq mmm-submode-decoration-level 2)
    
    )



#+end_src
