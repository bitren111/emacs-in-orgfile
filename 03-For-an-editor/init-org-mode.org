#+TITLE: Org mode customization configuration
#+OPTIONS: TOC:4 H:4


* Orgmode Configuration
Org-mode是Emacs中最常用的一个模式，在此模式下，可以支持文档编辑、任务管理、项目管理、GTD相关的任务管理等，另外在此模式下，可以借助一些工具在org-mdoe下进行画图，并可以将文档导出html, markdown, pdf等格式。 
** Base configuration

*** Org Structure Template

定义一部分在orgmode下编写代码块的快捷模板，此快捷模板可以通过 =(<s[TAB])= 的方式快捷输入模板块，如下以此类推，输入 =(<e[TAB])= 即可输入另外的模板。
#+begin_src emacs-lisp :tangle yes
(setq org-structure-template-alist
      '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
        ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
        ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
        ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
        ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
        ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
        ("o" "#+begin_src emacs-lisp :tangle yes\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
        ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
        ("H" "#+html: " "<literal style=\"html\">?</literal>")
        ("a" "#+begin_ascii\n?\n#+end_ascii")
        ("A" "#+ascii: ")
        ("i" "#+index: ?" "#+index: ?")
        ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC
*** Config for global function
#+begin_src emacs-lisp :tangle yes

;;================================================================
;; Config for Global function
;;================================================================
;; auto save files
(run-at-time "00:59" 3600 'org-save-all-org-buffers)

;; org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))


;; set export table's format
(setq org-table-export-default-format "orgtbl-to-csv")

(custom-set-variables
 '(org-export-table-data-tags '("<tr class=\"CUSTOM_ID>" . "</t>")))

;; auto load markdown-mode when load org-mode
(eval-after-load "org"
  '(require 'ox-md nil t))


#+end_src
** Org Capture
Org Capture是Org-mode中用来快速创建任务的功能，具体的应用场景为：当我正在工作或者写文档的同时，接了个电话，或者想起一个事情需要记录或者需要写入工作清单中，或者需要有一个电话打，为了不中断当前的工作，Org capture可以让我快速的记录，并设定时间，完成Org capture的录入10秒内就可以完成了。不影响当前的工作。

通过配置，可以将常用的工作任务分类添加，具体可以参照我的配置，可以做一些自己的修改。
按照下面的配置，我将日常工作分为如下几种情况：
  +--------+
  |TODO    |
  +--------+
  |NOTS    |
  +--------+
  | Journal|
  +--------+
  | Meeting|
  +--------+
  | PHONE  |
  +--------+
          
*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Org Capture
;;================================================================
;; config for org-mode
;; add some capture config
(setq org-directory "~/workspace/github/work-notes/captures")
;;(setq org-default-notes-file (concat org-directory "/notes.org"))
;;(define-key global-map (kbd "M-<f6>") 'org-capture)


;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "TODO" entry (file (concat org-directory "/refile.org"))
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "RESPONED" entry  (file (concat org-directory "/refile.org"))
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "NOTES" entry  (file (concat org-directory "/notes.org"))
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry  (file (concat org-directory "/refile.org"))
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry  (file (concat org-directory "/refile.org"))
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry  (file (concat org-directory "/refile.org"))
               "* MEETING with %? :MEETING:\n  :SUBJECT:\n%U\n" :clock-in t :clock-resume t)
              ("p" "Phone call" entry  (file (concat org-directory "/refile.org"))
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry  (file (concat org-directory "/refile.org"))
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))



#+end_src

*** Shot-key bindings

|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Capture       | C-c c                      | 打开capture                                                                               |
|               |                            |                                                                                           |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
#+begin_src emacs-lisp :tangle yes
;; add ~/notes/front-end-dev-plan.org into agenda

(global-set-key "\C-c a" 'org-agenda)
;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)


#+end_src
** Refile
Refile，则是针对Org capture的一个补充，Org capture会将创建的任务、日志等内容存储在一个单独的文件中，或者多个文件中，如果需要将某个节点重新进行分配，或者迁移到另一个文件中，则可以通过refile来进行迁移节点。

*** Configuration

#+begin_src emacs-lisp :tangle yes

;;================================================================
;; Config for Refile
;;================================================================
;;


;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

;; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

;; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
;; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
;; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
;; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

#+end_src

*** Shot-key binding
当前的配置操作快捷键：
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Refile        | C-c C-w                    | 将此标签任务迁移到其它文件中                                                              |
|               | C-c M-w                    | 同上，并保留当前文件内容                                                                  |
|               |                            |                                                                                           |
|               |                            |                                                                                           |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|

** Org Clocking
Org clocking模式，在任务上启动clocking，则开始对特定任务启动计时，并通过clocking 统计在各个任务中花的时间，通过汇总统计，则可以检查一天的工作情况。
*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Clock
;;================================================================
;;

;;
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
                                        ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun bh/resume-clock ()
  (interactive)
  (if (marker-buffer org-clock-interrupted-task)
      (org-with-point-at org-clock-interrupted-task
        (org-clock-in))
    (org-clock-out)))

(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))

#+end_src
*** Shot-key bindings

|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Clocking      | C-c C-x C-i                | 开始clock                                                                                 |
|               | C-c C-x C-o                | 退出clock                                                                                 |
|               | C-c C-x C-r                | 插入clock table                                                                           |
|               | C-c C-x ;                  | Start a count down time                                                                   |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle yes
;; config for clocking
;; (global-set-key (kbd "<f9> I") 'bh/punch-in)
;; (global-set-key (kbd "<f9> O") 'bh/punch-out)

;; (global-set-key (kbd "<f9> l") 'org-toggle-link-display)
;; (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)

;; (global-set-key (kbd "<f11>") 'org-clock-goto)
;; (global-set-key (kbd "C-<f11>") 'org-clock-in)

#+end_src
** Picture drawing mode
此功能可以支持在org-mdoe中通过文本方式，或代码方式进行画图，通过plantuml, ditaa等插件来进行画图。
*** Configuration 
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Picture Drawing
;;================================================================
;; set for plantuml
(setq org-ditaa-jar-path "~/.emacs.d/ditaa0_9.jar")
(setq org-plantuml-jar-path "~/.emacs.d/plantuml.8031.jar")
;; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

#+end_src

*** How to use it
   http://www.plantuml.com/
   * 安装依赖
     在archlinux的aur中找到plantuml进行安装；
   * 使用，在需要生成的图的位置代码用如何代码框起来
#+BEGIN_SRC LISP
   ,#+begin_src plantuml :file some_filename.png :cmdline -r -s 0.8
  <context of ditaa source goes here>
   ,#+end_src
#+END_SRC

** Config for TODO
TODO用来管理org mode中的任务状态，如下配置中，将任务状态分配置为下面几种；

*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for TODO Configuration
;;================================================================
;; (setq org-todo-keywords
;;       (quote (;;(sequence "TODO(t)" "NEXT(n)" "MAYBE(m)" "STARTED(s)" "APPT(a)" "|" "DONE(d)")
;;               (sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d)")
;;               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "MAYBE(m)" "|" "DONE(d!/!)")
              (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
              (sequence "WAITING(w@/!)" "HOLD(h)" "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (;;("NEXT" :inherit warning)
              ("PROJECT" :inherit font-lock-string-face)
              ("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("STARTED" :foreground "green" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("MAYBE" :foreground "grey" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              )))


(setq org-use-fast-todo-selection t)
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("MAYBE" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

#+end_src
*** Shot-key bindings
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
|               | C-c C-t                    | 设置TODO标签                                                                              |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
** Config for Tag
*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Tags
;;================================================================
;; Config TODO tags
(setq org-tag-alist '((:startgroup)
                      ("Develop" . ?1)
                      (:grouptags )
                      ("陆健美" . ?z)
                      (:endgroup)

                      ))
;; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

;; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)

#+end_src
*** Shot-key binding
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Tags          | C-c C-c C-c                | 打开tag选择窗口，然后通过字母索引选择tag                                                  |
|               | SPC                        | 清除所有tag                                                                               |
|               | C-c C-c                    | 可以直接输入tag的单词直接进行选择                                                         |
|               | C-c C-x C-c                | 打开列展示视图                                                                            |
|               | q                          | 退出列视图                                                                                |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
** Global column view and properties
    Column view是建立于org-mode任务管理之上的快速以表格查看各个任务情况的视图，可以使用 *C-c C-x C-c* 来打开column view，而此种查看方式只是一种查看，并不会被打印，如果需要通过动态管理column view，并支持打印，可以通过 *C-c C-x i* 插入一个动态的column部分在文件中，但此部分不是动态关联的，即修改了任务内容，插入的column view是不会更新的，但可以通过执行 *C-c C-x C-u* 进行更新；注：已经通过配置(add-hook 'before-save-hook 'org-update-all-dblocks)达到在保存文件时，即会更新文件中所有的column view中的数据；
    当需要针对某一个特定的任务组生成一个column view时，可以在此任务组的任务上，执行 *C-c C-x p* 插入属性，选择id，输入一个id值，然后在插入动态column时，选择刚刚输入的id值即可；如果需要对这个表特殊定义不同的column结构，可以再执行 *C-c C-x p* 时选择 *COLUMN* 来重新定义一个新的column结构内容；保存即可自动更新表s格；
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Global column view and properties
;;================================================================
;; Set default column view headings: Task Effort Clock_Summary
;;(setq org-columns-default-format "%25ITEM %10Effort(Effort){:} %SCHEDULED %DEADLINE %11Status %20TAGS %PRIORITY %TODO")
;;(setq org-columns-default-format "%25ITEM  %9Approved(Approved?){X} %SCHEDULED %DEADLINE %11Status %TAGS %PRIORITY %TODO")
(setq org-columns-default-format
      ;;" %TODO %30ITEM %15DEADLINE %15SCHEDULED %3PRIORITY %10TAGS %5Effort(Effort){:} %6CLOCKSUM"
      " %TODO %30ITEM %15DEADLINE %15SCHEDULED %3PRIORITY %10TAGS %5Effort(Effort){:}"
      )

;; global Effort estimate values
;; global STYLE property values for completion
(setq org-global-properties (quote (
                                    ;;("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("Status_ALL" . "Not-start In-Progress Delay Finished Cancled")
                                    ("ID_ALL" . "")
                                    ("STYLE_ALL" . "habit"))))
;; update dynamic blocks when save file
(add-hook 'before-save-hook 'org-update-all-dblocks)


#+end_src

*** Shot-key binding
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| column        | C-c C-x C-c                | 打开column视图模式                                                                        |
|               | r                          | 刷新                                                                                      |
|               | q                          | 退出                                                                                      |
|               | <left> <right> <up> <down> | 视图之间跳转                                                                              |
|               | v                          | 查看属性完整值                                                                            |
|               | C-c C-x i                  | 插入column视图在文件中                                                                    |
|               | C-c C-x C-u                | 更新column视图中的值，需要进入表格中执行                                                  |
|               | C-u C-c C-x C-u            | 更新此文件中所有的column视图内容                                                          |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|
| Property      | C-c C-x p                  | 设置一个属性                                                                              |
|               | C-c C-x p COLUMN           | 设置column，内容可以为%25ITEM 10%ITEM 5%TODO 30%SCEDULE 30%DEADLINE                       |
|---------------+----------------------------+-------------------------------------------------------------------------------------------|

** Config for File Export HTML Format

*** Configuration
配置导出org mode为html格式时的配置
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for File Export HTML Format
;;================================================================ 

;; Increase default number of headings to export
(setq org-export-headline-levels 6)
;; List of projects
;; Work-notes

(setq org-publish-project-alist

      ;; (work notes for)
      (quote (("work-notes"
               :base-directory "~/workspace/github/work-notes/"
               :publishing-directory "~/workspace/github/publish-works"
               :recursive t
               :table-of-contents t
               :base-extension "org"
               :publishing-function org-html-publish-to-html
               :style-include-default t
               :section-numbers y
               :table-of-contents y
               :author-info y
               :creator-info y)
              ("work-notes-extra"
               :base-directory "~/workspace/github/work-notes/"
               :publishing-directory "~/workspace/github/publish-works"
               :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
               :publishing-function org-publish-attachment
               :recursive t
               :author nil)
              ("worknotes"
               :components ("work-notes" "work-notes-extra"))
              )))
;; set parent node into DONE when all sub-tasks are done in org mode
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

;; I'm lazy and don't want to remember the name of the project to publish when I modify
;; a file that is part of a project.  So this function saves the file, and publishes
;; the project that includes this file
;; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish (&optional force)
  (interactive "P")
  (save-buffer)
  (org-save-all-org-buffers)
  (let (
        )
    (org-publish-current-project force)))


;;================================================================
;; Config for File Export HTML CSS Template
;;================================================================ 
;; add css for org-mode export to html files
;; Use org.css from the norang website for export document stylesheets
;;(setq org-html-head-extra "<link rel=\"stylesheet\" href=\"./org.css\" type=\"text/css\" />")
(setq org-html-head-extra "<script type=\"text/javascript\">var mytable = document.getElementsByTagName('td');for ( var e = \"\"; e < mytable.length; e ++ ) {if(e.innerHTML == \"level1\"){e.parentNode.style.backgroundColor=\"color=blue\";};  if(e.innerHTML == \"level2\"){    e.parentNode.style.backgroundColor=\"color=orange\";  };  if(e.innerHTML == \"level3\"){    e.parentNode.style.backgroundColor=\"color=magenta\";  };  if(e.innerHTML == \"level4\"){    e.parentNode.style.backgroundColor=\"color=gree\";  };}</script><style type=\"text/css\">body{margin:
1em; border-right: 5px solid #bbb; border-bottom: 5px solid #bbb;
padding: 0; background: #ddd none repeat scroll 0 0; border: 1px
solid #000; margin: 0; padding: 2em; color: #000;
font-family: \"Bitstream Vera Sans\", Verdana, sans-serif;
font-size: 85%;}code{color: #00f;}div#content{border: 1px solid
#bbb; background: #fff; margin: 0; padding: 2em;}a{color: #139;
text-decoration: none; padding: 1px;}a:hover{color:
#900;}#table-of-contents{margin: 1em 0; padding:
.1em;}div#content div#org-div-home-and-up{background: #369;
color: #fff;}div#org-div-home-and-up
a:link,div#org-div-home-and-up a:visited{color: #fff; background:
#369;}div#org-div-home-and-up a:hover{color:
#900;}div.title{margin: -1em -1em 0; font-size: 200%;
font-weight: bold; background: #369; color: #fff; padding: .75em
1em; font-family: \"BitStream Vera Sans\", Verdana; letter-spacing:
.1em;}h1{background: #369 none repeat scroll 0 0; color: #fff;
font-family: \"BitStream Vera Sans\", Verdana; font-size: 200%;
font-weight: bold; letter-spacing: 0.1em; margin: -1em -1em .2em;
padding: 0.75em 1em;}h2{font-size: 180%; border-bottom: 1px solid
#ccc; padding: .2em;}h3{font-size: 120%; border-bottom: 1px solid
#eee;}h4{font-size: 110%; border-bottom: 1px solid
#eee;}tt{color: #00f;}.verbatim{margin: .5em 0;}pre{border: 1px
solid #ccc; background: #eee; padding: .5em; overflow:
auto;}.verbatim pre{margin: 0;}.verbatim-caption{border: 1px
solid #ccc; border-bottom: 0; background: #fff; display: block;
font-size: 80%; padding: .2em;}div#postamble{text-align: left;
color: #888; font-size: 80%; padding: 0; margin: 0;}div#postamble
p{padding: 0; margin: 0;}div#postamble a{color:
#888;}div#postamble a:hover{color: #900;}table{font-size: 100%;
border-collapse: collapse; margin: .5em 0;}th, td{border: 1px
solid #777; padding: .3em; margin: 2px;}th{background:
#eee;}span.underline{text-decoration:
underline;}.fixme{background: #ff0; font-weight:
bold;}.ra{text-align: right;}span.todo.NEXT{color:blue;}span.todo.STARTED{color:green;}span.todo.WAITTING{color:orange;}span.todo.HOLD{color:magenta;}.tag{font-size:124%;}#table_level1{color:blue}#table_level2{color:orange}#table_level3{color:magenta}#table_level4{color:green}#table_level5{color:grey}img{max-width: 100%;}</style>")



#+end_src

** Config for File Export PDF Format

*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for File Export To PDF 
;;================================================================ 
;; config for export PDF
(require 'ox-latex)
(add-hook 'org-mode-hook
          (lambda () (setq truncate-lines nil)))
;;(require 'org-install)

;; 使用xelatex一步生成PDF


(setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
                              "xelatex -interaction nonstopmode %f"))
;; code执行免应答（Eval code without confirm）
(setq org-confirm-babel-evaluate nil)

;; Auctex

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("cn-article"
               "\\documentclass[10pt,a4paper]{article}
\\usepackage{graphicx}
\\usepackage{xcolor}

\\usepackage{lmodern}
\\usepackage{verbatim}
\\usepackage{fixltx2e}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{tikz}
\\usepackage{wrapfig}
\\usepackage{soul}
\\usepackage{textcomp}
\\usepackage{listings}
\\usepackage{geometry}
\\usepackage{algorithm}
\\usepackage{algorithmic}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{latexsym}
\\usepackage{natbib}
\\usepackage{fancyhdr}
%\\usepackage{comment}

\\usepackage{zhfontcfg} % added my own sty file under /usr/local/texlive/texmf-local/tex/latex/local

\\usepackage[xetex,colorlinks=true,CJKbookmarks=true,
linkcolor=blue,
urlcolor=blue,
menucolor=blue]{hyperref}
\\usepackage{xunicode,xltxtra}

\\hypersetup{unicode=true}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
marginparsep=7pt, marginparwidth=.6in}

\\XeTeXlinebreakskip = 0pt plus 1pt

\\definecolor{foreground}{RGB}{220,220,204}%浅灰
\\definecolor{background}{RGB}{62,62,62}%浅黑
\\definecolor{preprocess}{RGB}{250,187,249}%浅紫
\\definecolor{var}{RGB}{239,224,174}%浅肉色
\\definecolor{string}{RGB}{154,150,230}%浅紫色
\\definecolor{type}{RGB}{225,225,116}%浅黄
\\definecolor{function}{RGB}{140,206,211}%浅天蓝
\\definecolor{keyword}{RGB}{239,224,174}%浅肉色
\\definecolor{comment}{RGB}{180,98,4}%深褐色
\\definecolor{doc}{RGB}{175,215,175}%浅铅绿
\\definecolor{comdil}{RGB}{111,128,111}%深灰
\\definecolor{constant}{RGB}{220,162,170}%粉红
\\definecolor{buildin}{RGB}{127,159,127}%深铅绿
\\title{}
\\fancyfoot[C]{\\bfseries\\thepage}
\\chead{\\MakeUppercase\\sectionmark}
\\pagestyle{fancy}
\\tolerance=1000
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")
("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; 使用Listings宏包格式化源代码(只是把代码框用listing环境框起来，还需要额外的设置)
(setq org-latex-listings t)
;; Options for \lset command（reference to listing Manual)
(setq org-latex-listings-options
      '(
        ("basicstyle" "\\color{foreground}\\small\\mono")           ; 源代码字体样式
        ("keywordstyle" "\\color{function}\\bfseries\\small\\mono") ; 关键词字体样式
        ;;("identifierstyle" "\\color{doc}\\small\\mono")
        ;;("commentstyle" "\\color{comment}\\small\\itshape")         ; 批注样式
        ("stringstyle" "\\color{string}\\small")                    ; 字符串样式
        ("showstringspaces" "false")                                ; 字符串空格显示
        ("numbers" "left")                                          ; 行号显示
        ("numberstyle" "\\color{preprocess}")                       ; 行号样式
        ("stepnumber" "1")                                          ; 行号递增
        ("backgroundcolor" "\\color{background}")                   ; 代码框背景色
        ("tabsize" "4")                                             ; TAB等效空格数
        ("captionpos" "t")                                          ; 标题位置 top or buttom(t|b)
        ("breaklines" "true")                                       ; 自动断行
        ("breakatwhitespace" "true")                                ; 只在空格分行
        ("showspaces" "false")                                      ; 显示空格
        ("columns" "flexible")                                      ; 列样式
        ("frame" "single")                                          ; 代码框：阴影盒
        ("frameround" "tttt")                                       ; 代码框： 圆角
        ("framesep" "0pt")
        ("framerule" "8pt")
        ("rulecolor" "\\color{background}")
        ("fillcolor" "\\color{white}")
        ("rulesepcolor" "\\color{comdil}")
        ("framexleftmargin" "10mm")
        ))
;; Make Org use ido-completing-read for most of its completing prompts.
(setq org-completion-use-ido t)
;; 各种Babel语言支持
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (matlab . t)
   (C . t)
   (perl . t)
   ;;(objc . t)
   (sh . t)
   (ditaa . t)
   (plantuml . t)
   (org . t)
   (python . t)
   (sh . t)
   (dot . t)
   (haskell . t)
   (dot . t)
   (latex . t)
   (java . t)
   (js . t)
   ))

#+end_src
*** 
** Config for File Export PDF but use beamer Format
*** Configuration
#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for File Export To PDF but use beamer
;;================================================================ 
;; 导出Beamer的设置
;; allow for export=>beamer by placing #+LaTeX_CLASS: beamer in org files
;;-----------------------------------------------------------------------------
(add-to-list 'org-latex-classes
             ;; beamer class, for presentations
             '("beamer"
               "\\documentclass[11pt,professionalfonts]{beamer}
\\mode
\\usetheme{{{{Warsaw}}}}
%\\usecolortheme{{{{beamercolortheme}}}}

\\beamertemplateballitem
\\setbeameroption{show notes}
\\usepackage{graphicx}
\\usepackage{tikz}
\\usepackage{xcolor}
\\usepackage{xeCJK}
\\usepackage{amsmath}
\\usepackage{lmodern}
\\usepackage{fontspec,xunicode,xltxtra}
\\usepackage{polyglossia}

\\usepackage{verbatim}
\\usepackage{listings}
\\institute{{{{beamerinstitute}}}}
\\subject{{{{beamersubject}}}}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))



;; set org-article

(add-to-list 'org-latex-classes
             '("org-article"
               "\\documentclass{org-article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-default-class "cn-article")

;;
(add-hook 'message-mode-hook 'turn-on-orgtbl)

#+end_src
** End of file
#+begin_src emacs-lisp :tangle yes

(provide 'init-org-mode)
;; init-org-mode.el end here

#+end_src

* Orgmode table Configuration

#+begin_src emacs-lisp :tangle yes
;;================================================================
;; Config for Org Table, customized some function for operate on cells
;;================================================================
(defun org-table-swap-cells (i1 j1 i2 j2)
  "Swap two cells"
  (let ((c1 (org-table-get i1 j1))
        (c2 (org-table-get i2 j2)))
    (org-table-put i1 j1 c2)
    (org-table-put i2 j2 c1)
    (org-table-align)))

(defun org-table-move-single-cell (direction)
  "Move the current cell in a cardinal direction according to the
  parameter symbol: 'up 'down 'left 'right. Swaps contents of
  adjacent cell with current one."
  (unless (org-at-table-p)
    (error "No table at point"))
  (let ((di 0) (dj 0))
    (cond ((equal direction 'up) (setq di -1))
          ((equal direction 'down) (setq di +1))
          ((equal direction 'left) (setq dj -1))
          ((equal direction 'right) (setq dj +1))
          (t (error "Not a valid direction, must be up down left right")))
    (let* ((i1 (org-table-current-line))
           (j1 (org-table-current-column))
           (i2 (+ i1 di))
           (j2 (+ j1 dj)))
      (org-table-swap-cells i1 j1 i2 j2)
      (org-table-goto-line i2)
      (org-table-goto-column j2))))

(defun org-table-move-single-cell-up ()
  "Move a single cell up in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'up))

(defun org-table-move-single-cell-down ()
  "Move a single cell down in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'down))

(defun org-table-move-single-cell-left ()
  "Move a single cell left in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'left))

(defun org-table-move-single-cell-right ()
  "Move a single cell right in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'right))

(provide 'init-org-table-shift)
;; init-org-table-shift.el end here

#+end_src
